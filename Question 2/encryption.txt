Examples of different encryption and hashing methods, both one-way (hashing) and two-way (encryption), along with Python 3 scripts for each.

 One-Way Hashing Examples:

 1. MD5 (Message Digest Algorithm 5):

```python
import hashlib

def md5_hash(text):
    hashed_text = hashlib.md5(text.encode()).hexdigest()
    return hashed_text

# Example usage
plaintext = "Hello, World!"
md5_result = md5_hash(plaintext)
print(f"MD5 Hash: {md5_result}")
```

 2. SHA-256 (Secure Hash Algorithm 256-bit):

```python
import hashlib

def sha256_hash(text):
    hashed_text = hashlib.sha256(text.encode()).hexdigest()
    return hashed_text

# Example usage
plaintext = "Hello, World!"
sha256_result = sha256_hash(plaintext)
print(f"SHA-256 Hash: {sha256_result}")
```

Two-Way Encryption Examples:

 1. Symmetric Encryption (using Fernet from cryptography library):

```python
from cryptography.fernet import Fernet

def symmetric_encrypt(plain_text, key):
    cipher = Fernet(key)
    encrypted_text = cipher.encrypt(plain_text.encode())
    return encrypted_text

def symmetric_decrypt(encrypted_text, key):
    cipher = Fernet(key)
    decrypted_text = cipher.decrypt(encrypted_text).decode()
    return decrypted_text

# Example usage
symmetric_key = Fernet.generate_key()
plaintext = "Sensitive data"
encrypted_data = symmetric_encrypt(plaintext, symmetric_key)
decrypted_data = symmetric_decrypt(encrypted_data, symmetric_key)

print(f"Plaintext: {plaintext}")
print(f"Encrypted Data: {encrypted_data}")
print(f"Decrypted Data: {decrypted_data}")
```

 2. Asymmetric Encryption (using RSA from cryptography library):

```python
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding

def asymmetric_encrypt(plain_text, public_key):
    cipher_text = public_key.encrypt(
        plain_text.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return cipher_text

def asymmetric_decrypt(cipher_text, private_key):
    plain_text = private_key.decrypt(
        cipher_text,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return plain_text.decode()

# Example usage
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048
)
public_key = private_key.public_key()

plaintext = "Confidential message"
cipher_text = asymmetric_encrypt(plaintext, public_key)
decrypted_text = asymmetric_decrypt(cipher_text, private_key)

print(f"Plaintext: {plaintext}")
print(f"Cipher Text: {cipher_text}")
print(f"Decrypted Text: {decrypted_text}")
```
